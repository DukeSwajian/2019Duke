#include <kipr/botball.h>

//veer is: every 30 regular power, 1 extra power on right motor; every 10 is 3.33

//motor and servo ports

int leftarmservo = 1;
int rightarmservo = 3;
int clawservo = 0;
int cubearmmotor = 0;

int irsensor = 1;
int irsensor2 = 2; //right back side of the create
int lightsensor = 0;

//servo arm/claw positions
int leftarmservostraightup = 1400; //from 1550 //changed 150
int leftarmservopushtramdown = 1800;
int leftarmservoplacebotguy = 900; //not actual; still need
int leftarmservodown = 250;
int leftarmservoverydown = 100;

int leftarmservofrisbeeup = 800;
int leftarmservostart = 100;

int rightarmservostraightup = 750; //from 600 //changed 150
int rightarmservopushtramdown = 200;
int rightarmservoplacebotguy = 1250; //not actual; still need
int rightarmservodown = 1900;
int rightarmservoverydown = 2020;

int rightarmservofrisbeeup = 1350;
int rightarmservostart = 2000;

int clawservoopen = 0;
int clawservostraightopen = 800;
int clawservohalfclosed = 1515; //from 1650
int clawservoclosed = 2035;

//cube claw motor positions
int cubearmdown = 1075;//1125
int cubearmup = 450; 
int cubearmreset = 0;

int onehundredrightspintime = 1620; //lower charged = 1600; high charged = 1450
int twohundredrightspintime = 950; //lower charged = 950; high charged = 915

//void declarations
void servostart();
void motorreset();
void armup();
void armdown();
void armverydown();
void doubleslowservo(int servoport1, int servoport2, int targetposition1, int targetposition2);
void specialdoubleslowservo(int servoport1, int servoport2, int targetposition1, int targetposition2);
void alignline(int leftirsensor, int rightirsensor, int direction);

int main()
{   
    printf("Cube arm motor set-up correctly?\n");
    while (b_button() != 1);

    printf("Robot program started! Servos will be enabled...\n");
    msleep(1000);
    motorreset();
    enable_servos();
    servostart();

    printf("Set-up Create...\n");
    while (b_button() != 1);

    printf("Servo wires not tangled?\n");
    while (b_button() != 1);

    printf("Botguy Claw's gears meshed and axles in?\n");
    while (b_button() != 1);

    printf("Arm screwed in properly?\n");
    while (b_button() != 1);

    printf("Create on?\n");
    while (b_button() != 1);
    create_connect();
    create_full();

    printf("Connected to Create! Waiting for light...\n");
    while (b_button() != 1);
    msleep(2000);

    wait_for_light(lightsensor);
    shut_down_in(119);

    //================================================

    create_drive_straight(-150);
    msleep(2050);
    create_stop();

    armup();

    //alignline(irsensor,irsensor2,1);
    
    create_drive_direct(-151,-150);
    msleep(3500);
    create_stop();

    create_drive_straight(300);
    msleep(800); //1050
    create_stop();

    create_spin_CCW(200);
    msleep(924);
    create_stop();

    armverydown();
    
    create_drive_straight(-150); //added
    msleep(1000);
    create_stop();
    
    create_drive_straight(150);
    msleep(400);
    create_stop();

    create_spin_CCW(200);
    msleep(935); //down from 936
    create_stop();
    
    //alignline(irsensor,irsensor2,-1);

    create_drive_straight(100);
    msleep(1225);// before was 1325
    create_stop();

    msleep(750);

    create_drive_straight(-23);
    //msleep(50); //added
    specialdoubleslowservo(leftarmservo,rightarmservo,leftarmservofrisbeeup,rightarmservofrisbeeup);
    msleep(1000);
    create_stop();

    alignline(irsensor,irsensor2,-1);
    
    create_drive_direct(-150,-150);
    msleep(650); //allow create to move a little further past line
    create_stop();

    create_spin_CW(100);
    msleep(1600); //1600 at 100 when lower create battery
    create_stop();

    while(analog(irsensor)<3000) //while see white (looking for main cube center line)
    {
        create_drive_direct(200,200);
    }
    create_stop();

    create_drive_direct(-100,-100); //from -210
    msleep(200);//400 //from most recently 200
    create_stop();

    create_spin_CCW(100);
    msleep(1575); //1600 at lower create battery
    create_stop();

    create_drive_direct(-100,-100); //from -210
    msleep(900); //changed from 850
    create_stop();

    doubleslowservo(leftarmservo,rightarmservo,leftarmservopushtramdown,rightarmservopushtramdown); //put frisbee in

    alignline(irsensor,irsensor2,1);
    
    create_drive_direct(-100,-100); //from -210
    msleep(500); //300 decrease
    create_stop();

    create_spin_CW(200);
    msleep(882); // COMPETITION from 870
    create_stop();

    armup();
    
    create_drive_direct(-100,-100); //THIS PART ADDED FOR HOME BOARD; DONT THINK IS NEEDED FOR SCHOOL
    msleep(500); //COMPETITION FROM 800
    create_stop();

    create_spin_CW(200);
    msleep(882); //870
    create_stop();

    create_drive_direct(-100,-100); //from -210
    msleep(400); //decreased by 250
    create_stop();

    //=====================================================================================================

    /*create_drive_straight(-300);
    msleep(1050);
    create_stop();

    create_spin_CCW(200);
    msleep(950);
    create_stop();

    while(analog(irsensor)<3000) //while see white
    {
     	create_drive_direct(300,300);
    }
    create_stop();

    create_drive_direct(-100,-100); //from -210
    msleep(1100);
    create_stop();

    create_spin_CW(200);
    msleep(900);
    create_stop();
    */

    while (get_motor_position_counter(cubearmmotor) < cubearmdown)
    {
        mav(cubearmmotor,750);
    }
    freeze(cubearmmotor);

    while (get_motor_position_counter(cubearmmotor) > cubearmup)
    {
        mav(cubearmmotor,-750);
    }
    freeze(cubearmmotor);

    create_drive_direct(0,-103); //turn back from new location //correct is 104
    msleep(2500);
    create_stop();

    create_drive_direct(100,100); //increase 1500
    msleep(2000);
    create_stop();

    create_spin_CW(200);
    msleep(950);
    create_stop();

    create_drive_direct(-200,-200); //move further to other side of board
    msleep(1150); //from 1200
    create_stop();

    create_spin_CW(200);
    msleep(935);
    create_stop();

    alignline(irsensor,irsensor2,1); //added just NOW
    
    create_drive_direct(-200,-200); //backup into zone wall, prepare for moving tram
    msleep(3250); //+250 bc of alignline
    create_stop();

    armup();
    //msleep(500);

    //Duke and Kyle's Part
    //create_drive_straight(-100);
    //msleep(1000);


    doubleslowservo(leftarmservo,rightarmservo,leftarmservoplacebotguy,rightarmservoplacebotguy); //push down
	
    create_disconnect();
    
    msleep(3000);
    
}

void servostart()
{
    set_servo_position(clawservo,clawservoopen);
    set_servo_position(leftarmservo,leftarmservostart);
    set_servo_position(rightarmservo,rightarmservostart);
}

void motorreset()
{
    cmpc(cubearmmotor);
}

void armup()
{
    doubleslowservo(leftarmservo,rightarmservo,leftarmservostraightup,rightarmservostraightup);
}

void armdown()
{
    doubleslowservo(leftarmservo,rightarmservo,leftarmservodown,rightarmservodown);
}

void armverydown()
{
    doubleslowservo(leftarmservo,rightarmservo,leftarmservoverydown,rightarmservoverydown);
}

void doubleslowservo(int servoport1, int servoport2, int targetposition1, int targetposition2)
{
    int changingposition1 = get_servo_position(servoport1);
    int changingposition2 = get_servo_position(servoport2);
    while (changingposition1 < targetposition1 && changingposition2 > targetposition2)
    {
        msleep(3);
        set_servo_position(servoport1,changingposition1);
        set_servo_position(servoport2,changingposition2);
        changingposition1 = changingposition1 + 4;
        changingposition2 = changingposition2 - 4;
    }

    while (changingposition1 > targetposition1 && changingposition2 < targetposition2)
    {
        msleep(2);
        set_servo_position(servoport1,changingposition1);
        set_servo_position(servoport2,changingposition2);
        changingposition1 = changingposition1 - 2;
        changingposition2 = changingposition2 + 2;
    }

    while (changingposition1 < targetposition1)
    {
        msleep(2);
        set_servo_position(servoport1,changingposition1);
        changingposition1 = changingposition1 + 2;
    }

    while (changingposition2 < targetposition2)
    {
        msleep(2);
        set_servo_position(servoport2,changingposition2);
        changingposition2 = changingposition2 + 2;
    }

    while (changingposition1 > targetposition1)
    {
        msleep(2);
        set_servo_position(servoport1,changingposition1);
        changingposition1 = changingposition1 - 2;
    }

    while (changingposition2 > targetposition2)
    {
        msleep(2);
        set_servo_position(servoport2,changingposition2);
        changingposition2 = changingposition2 - 2;
    }

}

void specialdoubleslowservo(int servoport1, int servoport2, int targetposition1, int targetposition2)
{
    int changingposition1 = get_servo_position(servoport1);
    int changingposition2 = get_servo_position(servoport2);
    while (changingposition1 < targetposition1 && changingposition2 > targetposition2)
    {
        msleep(4);
        set_servo_position(servoport1,changingposition1);
        set_servo_position(servoport2,changingposition2);
        changingposition1 = changingposition1 + 2;
        changingposition2 = changingposition2 - 2;
    }

    while (changingposition1 > targetposition1 && changingposition2 < targetposition2)
    {
        msleep(4);
        set_servo_position(servoport1,changingposition1);
        set_servo_position(servoport2,changingposition2);
        changingposition1 = changingposition1 - 2;
        changingposition2 = changingposition2 + 2;
    }

    while (changingposition1 < targetposition1)
    {
        msleep(4);
        set_servo_position(servoport1,changingposition1);
        changingposition1 = changingposition1 + 2;
    }

    while (changingposition2 < targetposition2)
    {
        msleep(4);
        set_servo_position(servoport2,changingposition2);
        changingposition2 = changingposition2 + 2;
    }

    while (changingposition1 > targetposition1)
    {
        msleep(4);
        set_servo_position(servoport1,changingposition1);
        changingposition1 = changingposition1 - 2;
    }

    while (changingposition2 > targetposition2)
    {
        msleep(4);
        set_servo_position(servoport2,changingposition2);
        changingposition2 = changingposition2 - 2;
    }

}

void alignline(int leftirsensor, int rightirsensor, int direction)
{
    int first = 1;
    while (analog(rightirsensor) < 3000 || analog(leftirsensor) < 3000) //while see white
    {
        if (analog(leftirsensor) < 3000 && analog(rightirsensor) < 3000)
        {
           //create_stop();
           create_drive_direct(direction*80,direction*80);
        }

        if (analog(rightirsensor) < 3000 && analog(leftirsensor) > 3000)
        {
            //create_stop();
            create_drive_direct(0,direction*35);
            first = 0;
        }

        if (analog(leftirsensor) < 3000 && analog(rightirsensor) > 3000)
        {
            //create_stop();
            create_drive_direct(direction*35,0);
            first = 1;
        }
    }
    
    if (first == 1)
    {
     	create_drive_direct(0,direction*-20);
        while (analog(rightirsensor) > 3000);
        create_stop();
        
        create_drive_direct(direction*-20,0);
        while (analog(leftirsensor) > 3000);
        create_stop();
    }
    
    else 
    {
        create_drive_direct(direction*-20,0);
        while (analog(leftirsensor) > 3000);
        create_stop();
        
        create_drive_direct(0,direction*-20);
        while (analog(rightirsensor) > 3000);
        create_stop();
    }
    create_stop();
}
